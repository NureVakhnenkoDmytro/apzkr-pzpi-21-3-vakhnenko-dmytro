ВСТУП

Сучасні технології радикально змінюють традиційні бізнес-процеси,
включаючи процеси в галузі видавництва. Видавничі компанії стикаються з
необхідністю постійної адаптації до швидко змінюваних ринкових умов, де
швидкість, ефективність та точність обробки інформації стають критичними
факторами успіху. В умовах зростання обсягів роботи, необхідності
паралельної обробки великих масивів даних, інтеграції різних форм контенту
(друкованого, цифрового), виникає потреба в автоматизації цих процесів.
Розробка системи автоматизації видавничих процесів під умовною
назвою "AutoPublishingHouse" є актуальним завданням, що відповідає
викликам сучасного світу. Ця система призначена для оптимізації роботи
видавництв шляхом впровадження автоматизованого управління процесами
редагування, друку, розповсюдження та зберігання інформації. Вона
забезпечує ефективну координацію між різними підрозділами видавництва,
покращує контроль над процесами та зменшує ймовірність виникнення
помилок.
Метою створення "AutoPublishingHouse" є підвищення ефективності
роботи видавництв шляхом автоматизації ключових бізнес-процесів, таких як
управління контентом, контроль друку, координація тиражів та інтеграція з
іншими інформаційними системами. Система покликана мінімізувати ручні
операції, зменшити час на обробку замовлень, підвищити продуктивність праці
співробітників, а також забезпечити високий рівень якості кінцевого продукту.
Розробка систем автоматизації видавничих процесів є важливою в
умовах цифрової трансформації бізнесу. Використання інформаційних
технологій дозволяє не лише покращити продуктивність, а й забезпечити
високий рівень гнучкості у виконанні замовлень, оптимізувати використання
ресурсів, забезпечити швидке реагування на зміни в ринкових умовах. Сучасні

9
видавництва, що не впроваджують автоматизацію, ризикують відставати від
конкурентів, які використовують інноваційні підходи до управління бізнесом.
Зростання вимог до якості та швидкості видавничих процесів,
необхідність оперативного оновлення контенту та його адаптації до різних
платформ і форматів роблять автоматизацію необхідною умовою для успішної
роботи видавництва. Система "AutoPublishingHouse" також передбачає
можливість інтеграції з існуючими системами управління підприємством, що
дозволить створити єдине інформаційне середовище.
Об'єктом дослідження є процеси управління видавничою діяльністю, а
предметом — автоматизація цих процесів за допомогою інформаційних
технологій. Проєкт "AutoPublishingHouse" розглядається як програмна
платформа, яка забезпечує автоматизоване управління всіма етапами
видавничого циклу, від створення та редагування контенту до його друку та
розповсюдження.
Система "AutoPublishingHouse" буде реалізована на основі сучасних
технологій, таких як ASP.NET для серверної частини, Angular для клієнтського
інтерфейсу, а також SQL для баз даних. Архітектура системи передбачає
розподілену трирівневу модель, що включає шар даних (Data Access Layer),
бізнес-логіки (Business Logic Layer) та інтерфейс користувача (Presentation
Layer). Цей підхід дозволяє забезпечити гнучкість, масштабованість та легкість
у підтримці і розвитку системи. Крім того, передбачено можливість інтеграції
з IoT-пристроями для моніторингу і управління друкарськими процесами в
реальному часі.

10

1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ

1.1 Опис предметної області видавництв
Видавнича галузь займає важливе місце у сучасному інформаційному
суспільстві. Вона включає в себе процеси створення, підготовки, друку та
розповсюдження друкованих і цифрових видань, таких як книги, журнали,
газети та інші інформаційні продукти. Основними учасниками видавничого
процесу є автори, редактори, коректори, дизайнери, маркетологи, а також
кінцеві споживачі — читачі. Кожна з цих ролей відіграє важливу роль у
створенні високоякісного продукту, що відповідає потребам і очікуванням
аудиторії.
Процес видавничої діяльності зазвичай починається зі створення
контенту. Автори надають рукописи або статті, які потім проходять через
кілька етапів редакційної обробки: перевірка на відповідність стандартам
видавництва, коректура, дизайн і верстка. Після завершення цих етапів
документ відправляється на друк, де контролюється якість тиражу та
здійснюється розповсюдження готової продукції. Важливим аспектом
видавничого процесу є планування тиражу, складання графіків публікацій та
управління запасами матеріалів.
Сучасні видавництва стикаються з декількома викликами, такими як
необхідність одночасного управління великими обсягами даних, інтеграція
різних форм контенту (друкованого, цифрового), ефективна координація
роботи між різними підрозділами, а також швидке реагування на ринкові зміни
та вимоги. Крім того, зростає потреба в адаптації контенту під різні платформи:
мобільні додатки, вебсайти, соціальні мережі тощо.
У відповідь на ці виклики видавництва все частіше звертаються до
автоматизації процесів. Це дозволяє не тільки підвищити продуктивність, але
й забезпечити більш точне дотримання стандартів якості, покращити контроль

11
за витратами та оптимізувати використання ресурсів. Автоматизовані системи
управління видавничими процесами надають можливість більш ефективно
планувати роботу, управляти контентом, стежити за виконанням завдань, а
також інтегрувати дані з різних джерел.
Основні етапи видавничого процесу, які можуть бути автоматизовані,
включають:
Управління контентом: зберігання, редагування та організація
текстових, графічних та мультимедійних матеріалів. Це також включає роботу
з метаданими, що спрощує пошук та каталогізацію матеріалів.
Редакційний процес: автоматизація завдань коректури та редагування,
контроль версій документів, управління доступом до матеріалів для різних
ролей користувачів.
Друк та виробництво: інтеграція з системами управління друкарськими
станками для автоматичного налаштування параметрів друку, моніторинг
якості продукції в режимі реального часу.
Розповсюдження та маркетинг: планування тиражів, управління
каналами дистрибуції, автоматизація процесів замовлення і доставки,
інтеграція з електронними платформами для продажу цифрових видань.
Моніторинг та аналітика: збір даних про ефективність видавничих
процесів, аналіз продажів, оцінка реакції аудиторії на нові публікації, що
дозволяє приймати обґрунтовані рішення для подальшого розвитку.
Автоматизація видавничої діяльності не лише покращує ефективність і
продуктивність, але й забезпечує видавництвам можливість швидше
адаптуватися до змін на ринку, задовольняти потреби аудиторії і залишатися
конкурентоспроможними. Завдяки використанню автоматизованих систем,
видавництва можуть скоротити час виходу нових продуктів на ринок,
зменшити кількість помилок і підвищити рівень задоволеності клієнтів.

12
Таким чином, автоматизація процесів у видавництвах є стратегічно
важливим кроком, що дозволяє не тільки підвищити якість і ефективність
роботи, а й забезпечити стійкість і зростання компанії в умовах сучасного
ринку.
1.2 Аналіз існуючих рішень
У сучасній видавничій галузі існує безліч рішень для автоматизації процесів,
кожне з яких спрямоване на вирішення конкретних задач: від управління
контентом до моніторингу друкарських процесів і розповсюдження продукції.
Аналізуючи існуючі рішення, можна виділити декілька основних типів систем,
що використовуються у видавничій діяльності, а також визначити їх переваги
та недоліки.
1.2.1 Системи управління контентом (CMS)
Системи управління контентом (Content Management Systems, CMS) є
одними з найпоширеніших рішень у видавничій галузі. Вони дозволяють
зберігати, організовувати та керувати великими обсягами текстового,
графічного і мультимедійного контенту. Серед популярних CMS можна
виділити такі платформи, як WordPress, Joomla, Drupal, які забезпечують
функціональність для створення, редагування та публікації контенту, а також
інтеграцію з різними додатками та службами.
Переваги CMS:
− Легкість у використанні, навіть для користувачів без технічних знань.
− Велика кількість плагінів і модулів, що розширюють
функціональність.
− Можливість спільної роботи над контентом, що важливо для
редакційних процесів.

13
− Інтеграція з соціальними мережами та іншими платформами для
розповсюдження контенту.
Недоліки CMS:
− Обмежені можливості налаштування для специфічних видавничих
процесів без додаткової розробки.
− Потреба в регулярному оновленні для забезпечення безпеки та
сумісності.
− Можливі проблеми з продуктивністю при обробці великих обсягів
даних.
1.2.2 Системи автоматизації редакційних процесів
Для автоматизації редакційних завдань використовуються спеціалізовані
системи, такі як Adobe InCopy, Quark Publishing Platform, які дозволяють
редакторам, коректорам і дизайнерам спільно працювати над документами,
контролювати версії, управляти доступом до матеріалів та інтегруватися з
інструментами для верстки.
Переваги систем автоматизації редакційних процесів:
− Підтримка спільної роботи в реальному часі, що підвищує
продуктивність.
− Інтеграція з популярними інструментами для дизайну та верстки,
такими як Adobe InDesign.
− Можливість управління версіями документів і відстеження змін, що
полегшує контроль якості.
Недоліки:
− Висока вартість ліцензування, що може бути недоступним для малих
видавництв.
− Складність інтеграції з іншими системами, що не належать до лінійки
продуктів одного виробника.

14
− Вимоги до навчання персоналу для роботи з новими інструментами.
1.2.3 ERP-системи з підтримкою видавничих функцій
Деякі видавництва використовують комплексні ERP-системи (Enterprise
Resource Planning) з розширеннями для видавничої діяльності. Прикладом
таких систем є SAP for Media, Microsoft Dynamics 365 з додатковими
модулями, які забезпечують інтеграцію всіх бізнес-процесів підприємства —
від планування і управління запасами до продажу та фінансового обліку.
Переваги ERP-систем:
− Інтеграція всіх аспектів діяльності видавництва в єдину систему.
− Можливість отримання аналітичних даних і звітів для прийняття
управлінських рішень.
− Підтримка масштабування та адаптація до потреб великих
видавничих компаній.
Недоліки:
− Висока вартість впровадження та обслуговування.
− Необхідність налаштування системи під конкретні потреби
видавництва, що потребує часу і ресурсів.
− Складність впровадження та необхідність залучення
висококваліфікованих ІТ-спеціалістів.
1.2.4 Спеціалізовані програмні рішення
Існують також спеціалізовані програмні рішення, орієнтовані на
конкретні аспекти видавничої діяльності. Наприклад, Pressmart для цифрових
видань і газети, PageMajik для автоматизації робочих процесів видавництва,
що включають управління контентом, редагування, маркетинг і аналітику.
Переваги спеціалізованих рішень:

15
− Орієнтація на специфічні задачі видавництва, що дозволяє
забезпечити високий рівень ефективності.
− Можливість швидкої адаптації до змін ринкових умов та
впровадження інновацій.
− Підтримка роботи з різними форматами контенту (друковані та
цифрові видання).
Недоліки:
− Обмежена функціональність порівняно з великими ERP-системами.
− Можливість виникнення проблем з інтеграцією з іншими системами.
− Висока залежність від постачальника програмного забезпечення в
питаннях підтримки та оновлення.
Аналіз існуючих рішень для автоматизації видавничих процесів показує,
що кожен тип систем має свої переваги та недоліки. Вибір оптимальної
системи залежить від розміру видавництва, обсягу оброблюваної інформації,
фінансових можливостей та конкретних вимог до автоматизації. У деяких
випадках ефективним може бути комбінований підхід, що поєднує
використання CMS, ERP та спеціалізованих рішень, що дозволить
максимізувати продуктивність та ефективність управління видавничими
процесами.
Таким чином, для впровадження успішної системи автоматизації
видавництва важливо провести детальний аналіз потреб і вибрати оптимальне
рішення, яке забезпечить інтеграцію всіх ключових аспектів видавничої
діяльності.

16

2 ПОСТАНОВКА ЗАДАЧІ

2.1 Vision and scope
2.1.1 Background
Був час, коли вся видавнича система управлялася спільними зусиллями
безлічі людей і це було надзвичайно трудомістким. Тим не менш, цей процес
був керованим, оскільки організації мали власні ресурси для написання,
редагування, управління комунікаціями, а публікація була обмежена печаткою
на паперовому носії.
Але в сучасному цифровому світі така культура роботи може
розвалитися, оскільки компанії працюють з розподіленою робочою силою.
Навіть робочі процеси розвивалися з часом, і фрагменти вмісту публікуються
на декількох платформах одночасно. Весь процес став більш складним через
велику кількість повідомлень по електронній пошті, що відбуваються між
автором, редактором, дизайнером і видавничою командою. Таким чином, без
належної системи управління робочими процесами публікації висока
ймовірність виникнення проблем з контролем версій і пропущених термінів.
Тому прийшов час подумати про автоматизацію видавничих систем
управління робочими процесами. Таким чином, кілька етапів робочого
процесу публікації можуть бути автоматизовані для спрощення та оптимізації
всього процесу.
Це і послужило основною причиною створення програмної системи для
автоматизації процесів у видавництвах, яка могла б полегшити
відповідальність автора за відправку статті редактору, навіть виявити прості
граматичні помилки й виправити їх. Після редагування редактор публікував би
фрагменти контенту одночасно на декількох платформах одним натисканням
кнопки.

17

2.1.2 Business Opportunity
Розроблена програмна система допоможе здійснити колективну
потокову роботу працівників редакцій періодичних видань, а також зробити
редакційні процеси більш упорядкованими та ефективними.
Конкурентом є програмна система Quark Publishing System для
організації злагодженої колективної праці в редакціях періодики. Найбільш
ефективно QPS використовується у щоденних та щотижневих виданнях. В
ідеології системи лежить принцип клієнт-сервер. Позбавляє роботи з
файловою системою, вводячи прості та близькі персоналу редакції поняття:
стаття, макет, смуга, ілюстрація. QPS легко розширюється та інтегрується з
іншими системами: ведення реклами, прийому телетайпних новин, експорт
даних для друкованої публікації в Інтернет. Забезпечується коректна робота з
кириличними текстами на Mac OS та Windows у змішаних комп'ютерних
комплексах (наприклад, редакція працює на Mac та Windows, а верстка – лише
на Macintosh).
У порівняні з аналогом, програмна система AutoPublishingHouse
дозволить здійснювати постійний контроль за підготовкою матеріалів, вести
роботу з кожною смугою видання декільком співробітникам одночасно,
скоротити час підготовки номера до друку, уникнути помилок або відстежити,
на якому етапі та ким вони були допущені. А також буде існувати можливість
організації віддаленого доступу до матеріалів, забезпечуватись ефективне
розмежування прав персоналу редакції доступу до матеріалів на різних стадіях
готовності публікації. Це унеможливлює накладки на фінальних стадіях
підготовки матеріалу.
Способами монетизації проекту будуть реклама на сайтах, в соціальних
мережах і на банерах.

18

2.1.3 Business Objectives and SuccessCriteria
Бізнес-мета-1. Вихід на нові ринки.
Бізнес-мета-2. Випустити цей проект до 31.12.2021.
Бізнес-мета-3. Укладення кооперації з різними сервісами для того, щоб
їх рекламувати в продукті.
Критерії успіху-1. За 1 рік з моменту випуску продукт досягне точки
беззбитковості.
Критерії успіху-2.Збільшення кількості постійних
користувачівщомісяця. Критерії успіху-3. Досягнення попередньо
поставлених цілей.
2.1.4 Customer or MarketNeeds
Цей продукт буде задовольняти потреби користувачів своїм зрозумілим
та простим функціоналом й інтерфейсом, не буде займати
багато часу на автоматизацію процесів у видавництві.
Потрібен додаток, який буде з'єднувати в собі основні функціонали
продуктів, які на даний момент присутні на ринку і за рахунок цього давати
користувачеві максимальний функціонал в одному додатку.
2.1.5 Business Risks
Бізнес ризик-1: Відсутність фінансування на перших етапах існування
додатка може спричинити за собою зупинку проекту.
Бізнес ризик-2: Втрата репутації та вартостібренду.
Бізнес ризик-3: Ринкові зміни. Різкі коливання курсів валют. Бізнес
ризик-4: Неефективна рекламна компанія.

Бізнес ризик-5: Війна, політичні та соціальні заворушення. Бізнес ризик-
6: Природні та екологічні зміни (стихійні лиха).

19

2.2 Vision of the Solution
2.2.1 Vision Statement
Для людей, яким потрібен додаток для скорочення часу підготовки
публікації, а також зведення до мінімуму або повне виключення технічних
помилок та накладок (наприклад, затримок подачі номера до друкарні), буде
розроблен додаток AutoPublishingHouse.
Це рішення надасть користувачам можливість скорочення штату редакції
або розширення спектру продукції тими самими силами, а також надасть
оперативний контроль над усіма етапами роботи.
Ця програмна система буде створена для облегшення виконня роботи у
видавництвах.
2.2.2 Major Features
− Вивід популярності фарби, де показується назва фарби та кількість
матеріалів, де вона використовується
− Статистика популярності кольору серед матеріалів.
− Організація та впорядкування робочих процесів для всього
персоналу, залученого до роботи над виданнями.
− Організація та контроль у реальному часі процесу підготовки та
публікації видання через різні медійні канали.
− Пропозиція рішень та засобів підвищення продуктивності, що
збільшують швидкість, легкість та ефективність видавничого процесу.
2.2.3 Assumptions and Dependencies
Припущення-1. Всі користувачі нашої системи володіють якимись
знаннями достатньо для того, щоб працювати з електронним пристроєм.

20
Припущення-2. Користувачу потрібно автоматизувати процес його
роботи. Припущення-3. Користувач працює у видавництві.
Залежності-1. Швидкість відповіді та оновлення залежить від
потужностісервера, який приймає та обробляє дані, а також від швидкості
Інтернет- з'єднання.
Залежності-2. Додаток буде працювати на версіях Android не нижче 5,
веб- версія на операційних системах будь-якої версії, що підтримує коректну
роботу браузерів.
2.3 Scope and Limitations
2.3.1 Scope of InitialRelease
− Авторизація й реєстрація користувача та адміністратора системи.
− Редагування облікового запису.
− Створення, читання, редагування та видалення моделей.
− Створення матеріалу.
− Створення тиражу (вводиться id користувача, верстата та матеріалу,
з якого це буде друкуватись, а також кількість тиражу).
− У системі є фарба, верстат, матеріал, тираж та користувач.
− Наявність резервної копії даних, яка надалі служить для відновлення
інформації у разі її втрати.
− Реєстр бази даних.
− Вибір мови користувачем.
2.3.2 Scope of SubsequentReleases
− Впровадження більшої кількості мов.
− Впровадження більшої кількості локалізацій.
2.3.3 Limitations andExclusions

21
Обмеження та виключення-1. Готовий проект
повиненбутиопублікованийдо 31.12.2021.
Обмеження та виключення-2. Усі засоби розробки повинні
бутизаконними.
Обмеження та виключення-3. Проектна документація
повиннавідповідати стандартам.
Обмеження та виключення-4. Програмна система має
бутимасштабованою.
Обмеження та виключення-5. Програмна система повинна підтримувати
інтернаціоналізацію та локалізацію (кодові таблиці символів, обчислення та
формат дати та часу, локальний та універсальний час, метричні одиниці
вимірювання, англійська та американська системи мір, порядок сортування
текстових значень, напрям введення тексту).
Обмеження та виключення-6. Інтерфейс системи повинен бути
реалізований українською та англійською мовами.
Обмеження та виключення-7. Програмна система повинна забезпечувати
захист персональних даних та відповідати сучасним стандартам щодо захисту
даних.
Обмеження та виключення-8. Програмна система повинна включатиу
себе вбудовані програмні засоби адміністрування системи (управління
користувачами системи, управління даними системи, створення резервних
копій налаштувань та даних, експорт та імпорт даних та налаштувань,
управління сертифікатами).

22

2.4 Business Context
2.4.1 Stakeholder Profiles

Stakeholder Major Value Attitudes Major
Interests

Constraints

Власник
проекту

Збільшення
прибутку

Сильно
мотивоване

Більш
багатий набір
по всім функцій, ніж
аспектам пропонують
випуску, прямі
турбота конкуренти,
про швидкий
прибутковість доступ до
світового
ринку

Власник Збільшення Сильна Репутація Залежить від
видавництва виручки мотивація з компанії масштабу
усіх аспектів системи
роботи

23
Редактор/Робіт Збільшення Сильна Репутація Необхідний
ник виручки, мотивація з компанії доступ до
видавництва автоматизація усіх аспектів Інтернету
(користувач) процесів роботи,
роботи простота
використання

Замовник Збільшення Позитивне Простота Слід бути
реклами прибутку, ставлення до використання впевненим у
підвищення появи на ; великі популярност
впізнаваності ринку нового можливості і додатку,
бренду додатку, який для залучення щоб почати
буде нових співпрацю
рекламувати клієнтів
їх

2.4.2 Project Priorities

Dimension Driver (state Constraint (state Degree of
objective) limits) Freedom (state
allowable range)

Розклад Здати до кінця
останньої
лабораторної

24

Функції Всі функції,
заплановані для
випуску 1.0,
повинні бути
повністю
працездатні

100% основних
функцій повинні
бути реалізовані

Якість 95 % тестів
повинні бути
пройдені; всі
тести безпеки
повинні бути
пройдені

95% функцій
повинно бути
протестовано до
випуску

Штат В команді

розробки 1 людина

Вартість

2.4.3 Operating Environment
Клієнтська частина працює на Angular, серверна на .NET, база даних SQL
Server, мобільний додаток Android на Java. Користуватися можна з
підключенням до Інтернету, присутнійзахист даних та адміністрування.

25

3 СТРУКТУРА БАЗИ ДАНИХ

3.1 ER-моделювання
Під час виконання лабораторної роботи необхідно створити діаграми, які
будуть наявно відображати головні деталі виконання операцій на сервері для
кращого розуміння роботи серверної частини програмної системи. У
якостіСУБД була використана SQL Server.
У ході роботи створено базу даних для збереження та обробки
інформації про студентів, гуртожитки, ролі у системі та стани знаходження у
гуртожитку. ER- діаграма, приведена до третьої нормальної форми, відображає
структуру бази даних (див. рис. 3.1).
За ЕР-діаграмою ми маємо 6 таблиць:
1. Тираж;
2. Користувач;
3. Роль;
4. Друкарський станок;
5. Матеріал;
6. Барвник.
Для взаємодії між сутностями виокремлено наступні відношення:
1. Тираж – Користувач (1:М) – у тиражу може бути багато
користувачів, але користувач може відноситися лише до одного
тиражу;
2. Роль – Користувач (1:М) – користувач може мати лише одну роль;
3. Тираж – Друкарський станок (1:М) – конкретний друкарський
станок може відноситись лише до одного тиражу.
4. Тираж – Матеріал (1:М) – конкретний матеріал може
відноситись лише до одного тиражу.

26

5. Матеріал – Барвник (1:М) – конкретний барвник може
відноситись лише до одного матеріалу.

Рисунок 3.1 – ER-діаграма бази даних для програмної системи

автоматизації процесів у видавництвах

27

4 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ

4.1 Серверна частина
4.1.1 Специфікація взаємодії програмних компонентів
Для розробки серверної частини застосунку використано технологію
ASP.NET WEB-API платформи .NET. Архітектура побудована на базі моделі
MVC (Model- View-Controller). Система має трирівневу архітектуру та
складається з одного проекту та трьох бібліотек: DAL.dll (Data Access Layer)

для роботи з базою даних, BLL.dll (Business Logic Layer) для основної бізнес-
логіки системи, BL.dll (Binder Layer) для зв’язування основного проекту і

бібліотек DAL та BLL.
Основний проект містить контролери, які використовують функції BLL.
Він приймає вхідні запити, та відправляє у відповідь дані, що йому надає BLL.
BLL проводить обробку запитів, що йому надає основний проект, та відправляє
йому відповідь. Передача даних між ними проводяться завдяки моделям BL.dll,
які є копіями Entity-сутностей DAL.dll, що містять лише потрібні дані.
Авторизація та реєстрація реалізовані на основі технології ASP.NET Identity.
4.1.2 Опис сценарію поводження
Для представлення специфіки поведінки системи та взаємодії
користувачів з програмною системою для автоматизації контролю викидання
сміття, використовується Use-Case діаграма (див. рисунок 4.1).

28

Рисунок 4.1 – UseCase діаграма для програмної системи автоматизації

процесів у видавництвах

29
Не втручаючись в реалізацію програмних компонентів, діаграма
визначає множину послідовностей дій, спрямованих на досягнення актором
очікуваного результату.
У програмній системі присутні декілька видів акторів: звичайний
користувач, тобто редактор видання та адміністратор. Редактор має право,
після авторизації, переглядати сторінки з матеріалами, барвниками, тиражами,
друкарськими станками та додавати барвники, матеріали, друкарські станки та
тиражі. Він може переглядати статистику та звіти, та друкувати звіт.
Адміністратор має право, після авторизації, переглядати сторінки з
матеріалами, барвниками, тиражами, друкарськими станками та додавати
барвники, матеріали, друкарські станки та тиражі. Він може робити резервну
копію бази даних.
4.1.3 Опис розгортання серверної частини системи
Для відображення робочих екземплярів компонентів системи, а також
обчислювальниї вузлів під час роботи програми, компоненти, та об'єкти, що
виконуються на цих вузлах була побудована діаграма розгортання (див. рис.
4.2).

30

Рисунок 4.2 – Діаграма розгортання для програмної системи
автоматизації процесів у видавництвах

Також для відображення залежності між компонентами програмного
забезпечення відтворено діаграму компонентів, що зображено на рисунку 4.3.

31

Рисунок 4.3 – Діаграма компонентів для програмної системи
автоматизації процесів у видавництвах

Для взаємодії обробки запитів для серверу використану так звану логіку
middleware та клас TokenService. Для авторизації та автентифікації
користувача використовуються хешування паролів за допомогою бібліотеки
«Crypto». Дані для авторизації користувача отримуються POST запитом, після
якого йде підтвердження існування користувача в системі та дешифрування та
підтвердження однаковості паролів, після чого користувач отримує jwt токен,

32
завдяки котрому користувач може авторизуватися у системі. Фрагмент коду
логіки middleware представлений далі:

Код бізнес логіки системи
namespace BLL
{
public class TokenService
{
private readonly AuthOptions
_authOpions; private
readonly ApplicationContext
_context;
public
TokenService(AuthOption
s authOpions,
ApplicationContext
context)
{
_authOpions = authOpions;
_context = context;
}
public string GenerateJwtToken(User user)
{
var securityKey =
_authOpions.GetSymmetricSecurityKey();
var credentials = new SigningCredentials(securityKey,
SecurityAlgorithms.

HmacSha256);

var claims = new List<Claim>()
{
new Claim(JwtRegisteredClaimNames.Sub,
user.Id.ToString()), new
Claim(JwtRegisteredClaimNames.UniqueNam
e, user.Name)
};
var roles = _context.Roles;
claims.AddRange(roles
.Where(role => user.RoleId == role.Id).ToList()
.Select(role => new Claim("role", role.Name)));

33
var token = new JwtSecurityToken(_authOpions.Issuer,
_authOpions.A
udience,
claims,
expires:
DateTime.Now.AddSeconds(_authOpions.Toke
nLifeTime), signingCredentials:
credentials);
return new
JwtSecurityTokenHandler().WriteToken(token);
}
public JwtSecurityToken GetCurrentToken(string
accessToken)
{
var token = accessToken.Split(" ")[1];
return new JwtSecurityTokenHandler().ReadToken(token)
as JwtSecurityToken

;
}
}
}
4.1.4 Специфікація REST
Система працюватиме за архітектурним стилем взаємодії застосунків
REST. Для взаємодії серверу та інших компонентів системи буде
використовуватися HTTPS. Під час розробки проекту було створено API
документацію Swagger. Далі наведено приклад деяких ендпоінтів системи:

1. <HTTPS:POST>:api/Auth/register - реєстрація у системі. Квері-
парамери: name – ім’я, login – логін людини, яка хоче

зареєструватися, password – пароль, role – роль у системі;
2. <HTTPS:GET>:api/Dyes - отримання даних про барвники;

3. <HTTPS:POST>:api/Dyes – додавання барвника. Квері-
парамери: name – назва;

4. <HTTPS:GET>:api/Reports/printing-press – отримання звітів;
5. <HTTPS:GET>:api/Statistics/dye - отримання статистичних даних;

34
6. <HTTPS:GET>:api/Materials - отримання даних про матеріали;

7. <HTTPS:POST>:api/Editions – додавання тиражу. Квері-
парамери: count – кількість, userId – ідентифікатор користувача,

що додає, printingPressId – ідентифікатор друкарського станка,
materialId – ідентифікатор матеріалу.

4.2 Frontend
4.2.1 Специфікація взаємодії програмних компонентів
Для розробки front-end частини застосунку використано платформу для
створення веб-додатків Angular з використанням мови програмування

TypeScript. Архітектура побудована на базі моделі MVC (Model-View-
Controller). Для взаємодії з серверною частиною системи використовується

HTTP протокол та JSON формат транспортування даних, що у HTTP
термінології позначається зазвичай як application/json.
4.2.2 Опис сценарію поводження
Перед тим, як програмно реалізувати front-end частину, було
проаналізовано предметну область та встановлено всі основні способи
використання клієнтського веб-застосунку, створено UseCase діаграму
(див. рис 4.4), що описує сценарій поводження застосунку у процесі взаємодії
з його користувачами.

35

Рисунок 4.4 – UseCase діаграма front-end частини програмної системи

автоматизації процесів у видавництвах

Front-end частина програмної системи має декілька видів акторів:
редактор та адміністратор системи («Адміністратор»), що може керувати
користувачами системи. Редактор має право, після авторизації, переглядати
сторінки з матеріалами, барвниками, тиражами, друкарськими станками та
додавати барвники, матеріали, друкарські станки та тиражі. Він може
переглядати статистику та звіти, та друкувати звіт. Адміністратор має право,
після авторизації, переглядати сторінки з матеріалами, барвниками, тиражами,
друкарськими станками та додавати барвники, матеріали, друкарські станки та
тиражі. Він може робити резервну копію бази даних.

36

4.2.3 Опис компонентів front-end частини системи
Для відображення залежності між компонентами програмної системи
відтворено діаграму компонентів, що зображено на рисунку 4.5

Рисунок 4.5 – Діаграма компонентів front-end частини програмної
системи автоматизації процесів у видавництвах

37
Для взаємодії frontend-частини із сервером, використовується HTTPS
протокол та JSON
формат транспортування даних, що у HTTP термінології позначається
зазвичай як application/json.
4.2.4 Опис станів та переходів front-end частини системи
Для моделювання поведінки та відображення змін станів додатку у часі,
для наглядного розуміння станів, у яких опиняється система під час роботи та
опису умов, що необхідні для переходу з одного у інший, побудовано діаграму,
що визначає зміну станів об'єкту у часі – діаграму станів (див. рис. A2 додатку
А). Діаграму побудовано з точки зору системи під час використання її
редактором.
Для більш детального опису умов переходів системи з одного стану в
інший також наведено діаграму активності (див. рис. А3 додатку А).
Далі наведено фрагменти коду front-end частини програмної системи
автоматизації процесів у видавництвах.
Фрагменти коду front-end частини системи:
import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from
'@angular/forms'; import { HttpClient } from
'@angular/common/http';
import { environment } from
'src/environments/environment'; import { Router } from
'@angular/router';
@Component({
templateUrl:
'./login.component.html',
styleUrls:
['./login.component.scss']
})
export class LoginComponent implements
OnInit { form: FormGroup;
constructor(private http: HttpClient,
private router: Router) { }

38

ngOnInit(): void {
this.form = new FormGroup({
login: new
FormControl(''), password:
new FormControl('')
});
}
onLogin() {
this.http.post(`${environment.apiUrl}/auth/login`,
this.form.v alue)
.subscribe(({ token }: { token: string })
=> { localStorage.setItem('token',
token);
this.router.navigateByUrl('material');
});
}
}

39

5 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ
5.1 Особливості впровадження системи в різних умовах
Розроблена система автоматизації процесів видавництва є потужним
інструментом, який має широкий спектр застосування в різних видавничих
компаніях. Її гнучка архітектура дозволяє налаштовувати систему під
конкретні потреби кожного користувача. Це забезпечує максимальну
ефективність впровадження, що особливо важливо в умовах швидкозмінного
ринку видавничих послуг. Залежно від масштабів видавництва, система може
працювати як в малих командах, так і в великих видавничих компаніях, що
займаються масовим випуском продукції.
Однією з ключових особливостей є можливість інтеграції з існуючими

ERP-системами. Це дозволяє видавництвам, які вже мають налагоджені бізнес-
процеси, легко впровадити нову систему без суттєвих змін у своїй роботі.

Система підтримує інтеграцію через стандартизовані API, що значно спрощує
процес впровадження. Крім того, вона здатна взаємодіяти з різними базами
даних, що дозволяє використовувати її у видавництвах з різними технічними
рішеннями.
Важливим аспектом впровадження є навчання персоналу. Завдяки
інтуїтивно зрозумілому інтерфейсу, система є простою у використанні, що
мінімізує час на навчання працівників. Це дозволяє швидко адаптуватися до
роботи з новим програмним забезпеченням навіть тим працівникам, які мають
мінімальний досвід роботи з подібними системами. Видавництво може
організувати навчальні сесії та вебінари для персоналу, що значно підвищить
ефективність роботи з системою.
Система також підтримує можливість масштабування, що є важливим
фактором для видавництв, які планують розширювати свою діяльність.
Завдяки модульній архітектурі, система може бути легко розширена новими

40
функціями, що дозволяє видавництву адаптуватися до нових викликів ринку.
Наприклад, можна додати нові модулі для управління цифровими
публікаціями або для роботи з різними мовами та форматами.
Інший важливий аспект – це безпека даних. Система забезпечує високий
рівень захисту інформації, що знижує ризик витоку конфіденційних даних.
Видавництва, які працюють з великими обсягами чутливої інформації,
зможуть зберегти її в безпеці завдяки сучасним методам шифрування та
багаторівневій системі доступу. Це особливо важливо для видавництв, які
працюють з персональними даними або іншими конфіденційними
матеріалами.
Загалом, впровадження цієї системи може значно підвищити
ефективність роботи видавництва, скоротити витрати та покращити якість
обслуговування клієнтів. Незважаючи на початкові витрати на впровадження
та навчання персоналу, система швидко окупається завдяки зменшенню витрат
на ручну роботу та підвищенню продуктивності. Видавництва можуть
використовувати систему для покращення своєї конкурентоспроможності на
ринку, адаптуючи її під свої специфічні потреби та вимоги.
5.2 Переваги та недоліки використання системи
Однією з головних переваг системи є її здатність автоматизувати основні
процеси видавництва. Це включає в себе редагування, друк та розповсюдження
матеріалів, що значно підвищує продуктивність роботи та знижує потребу в
ручній праці. Завдяки автоматизації цих процесів, видавництва можуть
скоротити час на випуск продукції, що дозволяє швидше реагувати на зміни
ринку та потреби клієнтів.
Іншою важливою перевагою є зниження ризику помилок. Автоматизація
дозволяє зменшити ймовірність людських помилок, які можуть виникати під
час редагування чи підготовки матеріалів до друку. Система автоматично

41
перевіряє всі дані та виявляє можливі помилки, що значно підвищує якість
кінцевої продукції. Це особливо важливо для великих видавництв, де кожна
помилка може коштувати значних фінансових втрат.
Система також дозволяє знизити витрати на ручну працю. Оскільки
більшість процесів автоматизовані, видавництво може зменшити кількість
персоналу, необхідного для виконання рутинних завдань. Це дозволяє
перенаправити ресурси на більш важливі завдання, такі як розробка нових
продуктів чи маркетинг. Зменшення витрат на ручну працю також сприяє
підвищенню рентабельності видавництва.
Однак, система має і свої недоліки. Одним з них є можливість
виникнення складнощів при інтеграції з деякими застарілими програмними
рішеннями. Це може вимагати додаткових витрат на технічну підтримку та
налаштування системи, що може бути фінансово обтяжливим для невеликих
видавництв. Інтеграція з існуючими системами може також зайняти значний
час, що може затримати процес впровадження.
Інший недолік полягає в можливій складності налаштування системи під
специфічні потреби окремих видавництв. Незважаючи на гнучкість і модульну
архітектуру, деякі видавництва можуть зіткнутися з труднощами при адаптації
системи до своїх унікальних процесів. Це може вимагати залучення
додаткових ресурсів, таких як консалтинг або додаткова технічна підтримка,
що може підвищити загальні витрати на впровадження.
Нарешті, важливо відзначити, що, як і будь-яке програмне забезпечення,
система потребує регулярного оновлення та технічної підтримки. Видавництва
повинні бути готові до необхідності постійно оновлювати систему, щоб
забезпечити її відповідність сучасним вимогам безпеки та ефективності. Це
також включає в себе навчання персоналу новим функціям та можливостям
системи, що може вимагати додаткового часу та ресурсів.

42

ВИСНОВКИ

У ході виконання цієї роботи було розроблено та впроваджено
автоматизовану систему для підтримки та оптимізації видавничих процесів.
Вона дозволяє суттєво підвищити ефективність роботи видавництв,
автоматизуючи ключові етапи, такі як редагування, друк та розповсюдження
матеріалів. В результаті, продуктивність зростає, ризик помилок зменшується,
а витрати на ручну працю скорочуються, що позитивно впливає на
рентабельність видавничого бізнесу.
Система відзначається гнучкістю та масштабованістю, що робить її
придатною для використання в різних умовах та видавництвах будь-якого
масштабу. Завдяки можливості інтеграції з наявними ERP-системами та
іншими інструментами управління контентом, впровадження системи
відбувається без значних змін у роботі видавництв. Це дозволяє швидко
адаптуватися до нових умов та забезпечити ефективну роботу як в малих, так і
у великих видавничих компаніях.
Водночас, процес впровадження має свої виклики. Наприклад, інтеграція
з застарілими програмними рішеннями може потребувати додаткових ресурсів
та часу. Це слід враховувати при плануванні проекту. Крім того, для підтримки
ефективної роботи системи необхідно регулярно оновлювати програмне
забезпечення та проводити навчання персоналу, що також потребує
додаткових витрат.
Загалом, результати роботи демонструють, що впровадження
автоматизованої системи є значним напрямком для видавничої галузі. Це
дозволяє значно покращити якість і швидкість виконання робіт, що дає
видавництвам певні переваги на ринку.

43

ПЕРЕЛІК ДЖЕРЕЛ

1. C# [Електронний ресурс]: https://metanit.com/sharp/tutorial/1.1.php.
2. Entity Framwork Core [Електронний ресурс]:
https://metanit.com/sharp/entityframeworkcore/. (дата звернення 01.05.2024)
3. ASP.NET Core 5 [Електронний ресурс]:
https://metanit.com/sharp/aspnet5/.(дата звернення 01.05.2024)
4. Xamarin Documentation [Електронник ресурс]:
https://docs.microsoft.com/en-us/xamarin/ . (дата звернення 01.05.2024)
5. Newtonsoft.Json Documentation [Електронник ресурс]:
https://www.newtonsoft.com/json. (дата звернення 01.05.2024)
6. Visual Studio Documentation [Електронник ресурс]:
https://docs.microsoft.com/en-us/visualstudio/ . (дата звернення 01.05.2024)

44

ДОДАТОК А

Рисунок A2 – Діаграма станів front-end частини програмної системи

автоматизації процесів у видавництвах

Рисунок А3 – Діаграма активності для front-end частини частини
програмної системи автоматизації процесів у

видавництвах
